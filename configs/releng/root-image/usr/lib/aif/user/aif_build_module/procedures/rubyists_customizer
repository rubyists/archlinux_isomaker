#!/bin/bash
# Bash Module
#
# Contains routines we use to help flesh out our additionals.

# Dependencies
depend_procedure core automatic
# aif passes /usr/lib/aif/user/aif_build_module into its exectuion tree,
# following rubyists_aif_build_profile (generic-install-dsa rewrite)
# AIF calls worker_configure_system in rubyists_aif_profile. We then
# INSIDE that function all all of ours. These are the definitions of each.


customizer_system_prep ()
{
  # <!-- begin_system_prep = Rubyists, LLC. Default Build -->
  # Create and populate a directory with git pull of all our required files going forward.
  BUILD_CONFIG_DIR="/home/arch/tcc_arch_installer/rubyists"

  # Configure where the being-built install is.
  # We use the installer's var_TARGET_DIR variable as that should be where the new_install system is mounted.
  echo "** ATTENTION: Installer preparing NEW_SYSTEM, mount on: ${var_TARGET_DIR} **"

  # Install our network and pacman config into the chroot
	#
	# This will be called later on to kick off the AUR package install process.
	cp $BUILD_CONFIG_DIR/default_build/root-image/root/callcenter_config.sh $var_TARGET_DIR/root/
	
	# First the files we need
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/rc.conf $var_TARGET_DIR/etc/
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/resolv.conf $var_TARGET_DIR/etc/
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/pacman.conf $var_TARGET_DIR/etc/

	# Prepare for RVM within chroot
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/rvmrc $var_TARGET_DIR/etc/
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/profile.d/rvm.sh $var_TARGET_DIR/etc/profile.d/

	# Now the directories we need
  cp -R $BUILD_CONFIG_DIR/default_build/root-image/etc/network.d $var_TARGET_DIR/etc/
  cp -R $BUILD_CONFIG_DIR/default_build/root-image/etc/pacman.d $var_TARGET_DIR/etc/

  # Make sure root owns the replaced files. default ownership is root:root, perms are 644.
  echo "NOTE - setting permissions on replaced files"
  # First the directories
  chmod 755 $var_TARGET_DIR/etc/pacman.d
  chmod 755 $var_TARGET_DIR/etc/network.d
  chmod 755 $var_TARGET_DIR/etc/profile.d/rvm.sh
  chown -R root:root $var_TARGET_DIR/etc/pacman.d
  chown -R root:root $var_TARGET_DIR/etc/network.d

  # Now the files
  for name in {etc/rc.conf,etc/resolv.conf,etc/pacman.conf,etc/pacman.d/mirrorlist,etc/pacman.d/mirrorlist-canada,etc/network.d/rubyists-ethernet}; do
    chown root:root $var_TARGET_DIR/$name
    chmod 644 $var_TARGET_DIR/$name
  done

  # This will get rebuilt anyways and stops potential errors
  if [ -f "$var_TARGET_DIR/etc/profile.d/locale.sh" ]; then
    rm $var_TARGET_DIR/etc/profile.d/locale.sh
  fi
  # <!-- end_system_prep
}

customizer_install_support_packages ()
{
  # <!-- begin_install_support_packages = Rubyists, LLC. Default Build -->
  # Set up ssh access to 'callcenter', we;ll add the actual user when we chroot.
  # Physically ensure proper owner+perms are set correctly.
  echo "Copying Admin user directory"
  /bin/cp -R $BUILD_CONFIG_DIR/default_build/root-image/home/admin $var_TARGET_DIR/home/
  
  echo "Copying 'callcenter' user into place.."
  /bin/cp -R $BUILD_CONFIG_DIR/default_build/root-image/home/callcenter $var_TARGET_DIR/home/
  /bin/chmod 700 $var_TARGET_DIR/home/callcenter/.ssh
  /bin/chmod 600 $var_TARGET_DIR/home/callcenter/.ssh/authorized_keys

  # Now, chroot and execute within the context of the new system.
  echo "STARTING CHROOT"
	# Make sure we have a proper pacman
	cp $BUILD_CONFIG_DIR/default_build/root-image/etc/pacman.d/mirrorlist-canada $var_TARGET_DIR/etc/pacman.d/mirrorlist

	# Execute everything from  script within the chroot so all commands can be called directly on the chroot fs.
	/bin/mount --bin /dev /mnt/dev
	/usr/sbin/chroot --userspec=root:root /mnt/ /root/callcenter_config.sh
	
	# Now install RVM in the chroot
	/usr/sbin/chroot --userspec=root:root /mnt/ su -l callcenter -c /home/callcenter/install_rvm.sh

  # Mark that we completed successfully
  return 0
  # <!-- end_install_support_packages -->
}

customizer_configure_runit_services_and_logs ()
{
  # <!-- begin_configure_runit_services_and_logs = Rubyists, LLC. Default Build -->
  # Create default runit services
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/sshd /service/sshd
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/cron /service/cron

  # Set up socklog
  /usr/sbin/chroot --userspec=root:root /mnt/ socklog-conf unix root daemon
  /usr/sbin/chroot --userspec=root:root /mnt/ socklog-conf klog root daemon
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/socklog-unix /service/socklog-unix
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/socklog-klog /service/socklog-klog

  # Enable freeswitch as a default service last always. Not required, just good form that last service enabled
  # be that which everything else was installed as support for.
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/freeswitch /service/freeswitch 

  # Mark that we completed successfully
  return 0
  # <!-- end_configure_runit_services_and_logs -->
}
