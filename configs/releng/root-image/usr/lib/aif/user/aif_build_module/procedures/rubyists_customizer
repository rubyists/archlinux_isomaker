#!/bin/bash
# Bash Module
#
# Contains routines we use to help flesh out our additionals.

# Dependencies
depend_procedure core automatic

customizer_system_prep ()
{
  # <!-- begin_system_prep = Rubyists, LLC. Default Build -->
  # Create and populate a directory with git pull of all our required files going forward.
  BUILD_CONFIG_DIR="/home/arch/tcc_arch_installer/rubyists"
  cd $BUILD_CONFIG_DIR/default_build

  # Configure where the being-built install is.
  MOUNT="/mnt"

  # Configure our preferred, minimalistic, sudoers file
  # Removing here ensures sudo package has no reason to fail.
	if [ -f "$MOUNT/etc/sudoers" ]; then
    rm -f $MOUNT/etc/sudoers
	fi
	
  # Install fakeroot and sudo in chroot tree. Create final sudoers file.
	/usr/bin/yes | /usr/bin/pacman -Sy -r $MOUNT
	/usr/bin/yes | /usr/bin/pacman -S fakeroot sudo -r $MOUNT

  echo "root ALL=(ALL) ALL" > ./sudoers
  echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> ./sudoers
  mv -f ./sudoers $MOUNT/etc/sudoers
  chmod 0440 $MOUNT/etc/sudoers
  chown root:root $MOUNT/etc/sudoers
  
  # Copy our required pacman.conf into place and update system. Capture a logfile of the action.
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/pacman.conf $MOUNT/etc/pacman.conf
  chown root:root $MOUNT/etc/pacman.conf
  chmod 644 $MOUNT/etc/pacman.conf

  # Install our network config
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/rc.conf $MOUNT/etc/
  cp $BUILD_CONFIG_DIR/default_build/root-image/etc/resolv.conf $MOUNT/etc/
  cp -R $BUILD_CONFIG_DIR/default_build/root-image/etc/network.d $MOUNT/etc/


  # Make sure root owns the replaced files. default ownership is root:root, perms are 644.
  echo "NOTE - setting permissions on replaced files"
  for name in {/etc/rc.conf,/etc/resolv.conf,/etc/pacman.conf,/etc/network.d/rubyists-ethernet}; do
    chown -R root:root $MOUNT/$name
    chmod 644 $MOUNT/$name
  done

  # This will get rebuilt anyways and stops potential errors
  if [ -f "$MOUNT/etc/profile.d/locale.sh" ]; then
    rm $MOUNT/etc/profile.d/locale.sh
  fi

	# We need to chroot to the base of the new install for everything from here forward
	#chroot /mnt/
  # Now sync and update the package lists, then upgrade the system.
	echo "Installer sees installed_system's mount as: ${var_TARGET_DIR}"
	
  /usr/sbin/chroot --userspec=root:root /mnt/ pacman -Syy
  /usr/sbin/chroot --userspec=root:root /mnt/ pacman --noprogressbar --noconfirm --logfile $HOME/pacman_install_and_upgrade.log -Syu
  # <!-- end_system_prep
}

customizer_install_support_packages ()
{
  # <!-- begin_install_support_packages = Rubyists, LLC. Default Build -->
  # Change to 'callcenter'. All further work should be owned by 'callcenter'

  # Set up ssh access to 'callcenter', we;ll add the actual user when we chroot.
  # Physically ensure proper owner+perms are set correctly.
  echo "Copying 'callcenter' user into place.."
  /bin/cp -R $BUILD_CONFIG_DIR/default_build/root-image/home/callcenter $MOUNT/home/
  /bin/chmod 700 $MOUNT/home/callcenter/.ssh
  /bin/chmod 600 $MOUNT/home/callcenter/.ssh/authorized_keys

	# Now, chroot and execute within the context of the new system.
  echo "STARTING CHROOT"
  # Add 'callcenter' user now that we've populated it's homedir with the authorized_keys file.
  /usr/sbin/chroot --userspec=root:root /mnt/ /usr/sbin/useradd -g users -G wheel -s /bin/bash callcenter
  # Ensure that callcenter owns it's homedir and files, then su to callcenter to start pkg builds.
	/usr/sbin/chroot --userspec=root:root /mnt/ /bin/chown -R callcenter:users /home/callcenter

  # NOTE: This is where masterkorp's work goes. This is where we install and configure packages.
  #
  # Expect 'callcenter'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c whoami
  
  # Configure filesystem for package builds
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'mkdir $HOME/builds'
  # chroot --userspec=root:root /mnt/ su -l callcenter -c cd $HOME/builds

  # Get all needed AUR packages for our configuration.
  # TODO: Change this so a sourced file of packages we can pass to a looped $(wget $url)
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'echo "**** STARTING BUILDS ****"'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/fg/fgetty/fgetty.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/ru/runit-dietlibc/runit-dietlibc.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/ru/runit-run/runit-run.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/ru/runit-services/runit-services.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/sv/sv-helper/sv-helper.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/so/socklog-dietlibc/socklog-dietlibc.tar.gz'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; wget http://aur.archlinux.org/packages/fr/freeswitch-git/freeswitch-git.tar.gz'

  # Now extract, build, create, and install AUR packages we grabbed
  # TODO: Change this to a sourced, ordered, file for package install
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds ; for name in ./*.gz ; do tar -xzvf $name ; done'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/chown -R callcenter:users /home/callcenter/builds
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/mknod /dev/null c 1 3
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/chmod 0666 /dev/null
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/fgetty ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/runit-dietlibc ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/runit-run ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/socklog-dietlibc ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/runit-services ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/sv-helper ; makepkg -si'
  /usr/sbin/chroot --userspec=root:root /mnt/ /bin/su -l callcenter -c 'cd $HOME/builds/freeswitch-git ; makepkg -si'
  
	# Mark that we completed successfully
	return 0
  # <!-- end_install_support_packages -->
}

customizer_configure_runit_services_and_logs ()
{
  # <!-- begin_configure_runit_services_and_logs = Rubyists, LLC. Default Build -->
  # Create default runit services
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/sshd /service/sshd
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/cron /service/cron

  # Set up socklog
  /usr/sbin/chroot --userspec=root:root /mnt/ socklog-conf unix root daemon
  /usr/sbin/chroot --userspec=root:root /mnt/ socklog-conf klog root daemon
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/socklog-unix /service/socklog-unix
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/socklog-klog /service/socklog-klog

  # Enable freeswitch as a default service last always. Not required, just good form that last service enabled
  # be that which everything else was installed as support for.
  /usr/sbin/chroot --userspec=root:root /mnt/ ln -s /etc/sv/freeswitch /service/freeswitch 

	# Mark that we completed successfully
	return 0
  # <!-- end_configure_runit_services_and_logs -->
}
